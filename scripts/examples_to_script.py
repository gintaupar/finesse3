from __future__ import annotations

import argparse
import re
import subprocess
import textwrap
from pathlib import Path
from typing import Union
import io
import contextlib
import sys


import docutils.core
from docutils.parsers.rst import directives
from jupyter_sphinx import JupyterCell, JupyterCellNode

directives.register_directive("jupyter-execute", JupyterCell)
ROOT = Path(__file__).parent.parent
StrPath = Union[str, Path]
SKIPPED_FILES = {"index", "inference_on_RoC"}
VALID_EXTENSIONS = [".rst", ".ipynb"]


def run(cmd: str, hide_output: bool, stdin: str = None) -> str:
    res = subprocess.run(
        cmd, shell=True, check=True, text=True, capture_output=True, input=stdin
    )
    if not hide_output:
        print(res.stdout)
        print(res.stderr, file=sys.stderr)

    return res.stdout


def format_script(script: str, hide_output: bool) -> str:
    return run(
        " | ".join(
            [
                "autoflake -i --remove-all-unused-imports --remove-unused-variables -",
                "isort --project finesse -",
                "black -",
            ]
        ),
        hide_output,
        stdin=script,
    )


def get_script_from_rst(path: StrPath, hide_output: bool) -> str:
    stdout = io.StringIO() if hide_output else sys.stdout
    stderr = io.StringIO() if hide_output else sys.stderr

    with contextlib.redirect_stderr(stderr):
        with contextlib.redirect_stdout(stdout):
            with open(path) as f:
                doctree = docutils.core.publish_doctree(
                    remove_include_directive(f.read())
                )
    return "\n".join(node.astext() for node in doctree.findall(JupyterCellNode))


def get_script_from_ipynb(path: StrPath, hide_output: bool) -> str:
    cmd = " ".join(
        [
            "jupyter nbconvert --to python --stdout",
            "--TemplateExporter.exclude_markdown=True --no-prompt",
            str(path),
        ]
    )
    # Remove "!/usr/bin/env python\n# coding: utf-8" before returning
    return run(cmd, hide_output).split("\n", maxsplit=2)[2]


def remove_include_directive(string: str) -> str:
    return re.sub(r".. include:: /defs.hrst", "", string)


def remove_empty_lines(string: str) -> str:
    return re.sub(r"^\n", "", string, flags=re.M)


def main(destination_file: StrPath, hide_output: bool = True):
    examples_dir = ROOT / "docs/source/examples"
    assert examples_dir.exists()
    destination_file = Path(destination_file)
    destination_file.unlink(missing_ok=True)
    with open(destination_file, "w") as f:
        f.write(f"# file autogenerated by {Path(__file__).relative_to(ROOT)}\n")

    scripts = []
    for source in sorted(
        f
        for f in examples_dir.glob("*")
        if f.suffix in VALID_EXTENSIONS and f.stem not in SKIPPED_FILES
    ):

        if source.suffix == ".rst":
            script = get_script_from_rst(source, hide_output)
        elif source.suffix == ".ipynb":
            script = get_script_from_ipynb(source, hide_output)
        else:
            raise NotImplementedError(
                f"script generator for '{source.suffix}' not implemented"
            )

        script = remove_empty_lines(script)

        # # disable plotting
        script = "\n".join(
            [
                "import matplotlib",
                "# Suppress plot showing",
                "matplotlib.use('Agg')",
                script,
                "",
            ]
        )

        if not hide_output:
            print("File before formatting\n" + "=" * 15)
            print(script)

        script = format_script(script, hide_output)

        script = textwrap.indent(script, prefix=" " * 4)
        script = f"def ex_{source.stem}():\n{script}"

        scripts.append(script)

    with open(destination_file, "a") as f:
        f.write(format_script("\n".join(scripts), hide_output))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""
        Parse all the jupyter execute blocks from all rst files in docs/source/examples
        and turn every rst file into a single function, to be used as a benchmark in the test suite.

        Requires isort, autoflake and black for formatting the code blocks.
        """
    )
    parser.add_argument(
        "-d",
        nargs=1,
        default=ROOT / "tests/testutils/example_benchmarks.py",
        type=Path,
        help="Destination file for the benchmark module. Will be overwritten. Defaults to `tests/testutils/example_benchmarks.py`",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Show docutils output and error messages",
    )
    args = parser.parse_args()
    main(args.d, hide_output=not args.verbose)
